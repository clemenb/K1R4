from flask import Flask, request, jsonify
from flask_cors import CORS
from google import genai
from PIL import Image
import base64
import io
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

# Initialize Gemini client
def get_gemini_client(api_key=None):
    """Initialize Gemini client with API key"""
    if api_key:
        return genai.Client(api_key=api_key)
    elif os.getenv('GEMINI_API_KEY'):
        return genai.Client(api_key=os.getenv('GEMINI_API_KEY'))
    else:
        raise ValueError("No API key provided")

@app.route('/api/generate-outfit', methods=['POST'])
def generate_outfit():
    try:
        data = request.get_json()
        
        # Extract data from request
        api_key = data.get('api_key')
        avatar_image_b64 = data.get('avatar_image')
        clothing_images_b64 = data.get('clothing_images', [])
        event_type = data.get('event_type', 'Casual')
        
        if not avatar_image_b64:
            return jsonify({'error': 'Avatar image is required'}), 400
        
        # Initialize Gemini client
        client = get_gemini_client(api_key)
        
        # Decode base64 images
        def decode_base64_image(base64_string):
            # Remove data URL prefix if present
            if 'base64,' in base64_string:
                base64_string = base64_string.split('base64,')[1]
            
            image_data = base64.b64decode(base64_string)
            return Image.open(io.BytesIO(image_data))
        
        avatar_image = decode_base64_image(avatar_image_b64)
        
        # Prepare prompt
        prompt = f"""Dress this anime girl avatar with the provided clothing items for a {event_type} event. 
        Create a complete, fashionable anime-style outfit that properly fits the avatar's body.
        The clothing should be realistically integrated onto the avatar, not just placed beside it.
        Generate a full-body anime-style image of the avatar wearing the complete outfit.
        IMPORTANT: Return ONLY the generated image, no text explanation."""
        
        # Prepare contents list
        contents = [prompt, avatar_image]
        
        # Add clothing images
        for clothing_b64 in clothing_images_b64[:3]:  # Limit to 3 clothing items
            try:
                clothing_image = decode_base64_image(clothing_b64)
                contents.append(clothing_image)
            except Exception as e:
                print(f"Error processing clothing image: {e}")
                continue
        
        # Generate outfit using Gemini 2.5 Flash Image
        print("Sending request to Gemini 2.5 Flash Image...")
        response = client.models.generate_content(
            model="gemini-2.5-flash-image",
            contents=contents,
        )
        
        # Extract generated image from response
        generated_image_b64 = None
        for part in response.candidates[0].content.parts:
            if part.inline_data is not None:
                # Convert image data to base64
                image_bytes = part.inline_data.data
                generated_image_b64 = base64.b64encode(image_bytes).decode('utf-8')
                break
        
        if not generated_image_b64:
            return jsonify({'error': 'No image generated by the model'}), 500
        
        return jsonify({
            'success': True,
            'generated_image': f"data:image/png;base64,{generated_image_b64}",
            'message': 'Outfit generated successfully'
        })
        
    except Exception as e:
        print(f"Error in generate_outfit: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    return jsonify({'status': 'healthy', 'message': 'Backend server is running'})

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
